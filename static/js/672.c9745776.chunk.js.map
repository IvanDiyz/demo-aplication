{"version":3,"file":"static/js/672.c9745776.chunk.js","mappings":"8MACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BAA7K,EAAiN,yB,mBCUjN,MARA,SAAoBA,GAClB,OACE,gBAAKC,UAAWC,EAAW,IAAMA,EAAjC,UACE,SAAC,KAAD,CAASC,GAAE,UAAKH,EAAMI,IAAtB,SAA6BJ,EAAMK,QAGxC,ECCD,MARA,SAAiBL,GACf,OACE,0BACE,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMM,WAGvC,E,uCCiCD,IAAIC,GAAYC,EAAAA,EAAAA,GAAiB,IAqB3BC,GAAsBC,EAAAA,EAAAA,GAAU,CAACC,KAAM,wBAAjBD,EAnBL,SAACV,GACtB,OACE,0BACE,kBAAMY,SAAUZ,EAAMa,aAAcC,OAAO,GAA3C,WACE,SAACC,EAAA,EAAD,CACEV,KAAK,iBACLW,SAAU,CAACC,EAAAA,EAAUV,GACrBW,UAAWC,EAAAA,GACXC,YAAY,kBAEd,0BACE,2CAKT,IAKD,EAvDA,SAAiBpB,GAGf,IAAIqB,EAAkBrB,EAAMsB,QAAQC,KAAI,SAACC,GACvC,OAAO,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAMD,GAAIoB,EAAEpB,IACxC,IAKGqB,EAAmBzB,EAAM0B,SAASH,KAAI,SAACI,GACzC,OAAO,SAAC,EAAD,CAASrB,QAASqB,EAAErB,SAC5B,IAQD,OACE,iBAAKL,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAiCmB,IAAuB,KAExD,iBAAKpB,UAAWC,EAAhB,WACE,yBAAMuB,IADR,QAGA,SAAChB,EAAD,CAAqBG,SAZL,SAACgB,GACnBC,QAAQC,IAAIF,GACZ5B,EAAM+B,oBAAoBH,EAASI,eACpC,MAYF,EC9BGC,EAAkB,SAACC,GACrB,MAAO,CACLZ,QAASY,EAAMC,YAAYb,QAC3BI,SAAUQ,EAAMC,YAAYT,SAC5BU,cAAeF,EAAMC,YAAYC,cAEpC,EACGC,EAAqB,SAACC,GACxB,MAAO,CACLP,oBAAqB,SAACC,GACpBM,GAASC,EAAAA,EAAAA,GAAwBP,IACjCM,GAASE,EAAAA,EAAAA,IAAM,wBAChB,EAEJ,GAEDC,EAAAA,EAAAA,KACEC,EAAAA,EAAAA,IAAQT,EAAiBI,GACzBM,EAAAA,EAFFF,CAGEG,GAGF,OAAeH,EAAAA,EAAAA,KACbC,EAAAA,EAAAA,IAAQT,EAAiBI,GACzBM,EAAAA,EAFF,CAGEC,E,mJC9BEC,EAA6B,SAACX,GAAD,MAAY,CAC3CY,OAAQZ,EAAMa,KAAKD,OADY,EAIpBH,EAAmB,SAACK,GAAe,IAExCC,EAFuC,0IAG3C,WACE,OAAKC,KAAKlD,MAAM8C,QACT,SAACE,GAAD,UAAeE,KAAKlD,SADI,SAAC,KAAD,CAAUG,GAAG,UAE7C,KAN0C,GAEbgD,EAAAA,WAShC,OAFqCT,EAAAA,EAAAA,IAAQG,EAARH,CAAoCO,EAG1E,C","sources":["webpack://react-k-1/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__muzqK\",\"dialogsItems\":\"Dialogs_dialogsItems__mZCFt\",\"active\":\"Dialogs_active__08FQh\",\"dialog\":\"Dialogs_dialog__dUERn\",\"messages\":\"Dialogs_messages__DJS6Y\",\"message\":\"Dialogs_message__Cmpo+\"};","import { NavLink } from \"react-router-dom\";\r\nimport s from \"../Dialogs.module.css\";\r\n\r\nfunction DialogItem(props) {\r\n  return (\r\n    <div className={s.dialog + \" \" + s.active}>\r\n      <NavLink to={`${props.id}`}>{props.name}</NavLink>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DialogItem;\r\n","import s from \"../Dialogs.module.css\";\r\n\r\nfunction Message(props) {\r\n  return (\r\n    <div>\r\n      <div className={s.message}>{props.message}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\n\r\nfunction Dialogs(props) {\r\n  /* функция MAP которая перебирает масив dialogs и забирает значение name и id, \r\nи отдает через props компоненте <DialogItem /> */\r\n  let dialogsElements = props.dialogs.map((d) => {\r\n    return <DialogItem name={d.name} id={d.id} />;\r\n  });\r\n\r\n  /* функция MAP которая перебирает масив messages в state, обращаемся к атрибуту \r\nmessage массива messages и отдаем через props компоненте <Message /> котрая \r\nвыводит это значение в UI */\r\n  let messagesElements = props.messages.map((m) => {\r\n    return <Message message={m.message} />;\r\n  });\r\n  // end\r\n\r\n  let addNewMessage = (formData) => {\r\n    console.log(formData);\r\n    props.newMessageContainer(formData.newMessageBody)\r\n  }\r\n\r\n  return (\r\n    <div className={s.dialogs}>\r\n      <div className={s.dialogsItems}>{dialogsElements}</div>{\" \"}\r\n      {/* рендре компоненты <DialogItem/> */}\r\n      <div className={s.messages}>\r\n        <div>{messagesElements}</div> {/* рендре компоненты <Message/> */}\r\n      </div>\r\n      <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nlet maxLength = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n  return (\r\n    <div>\r\n      <form onSubmit={props.handleSubmit} action=\"\">\r\n        <Field\r\n          name=\"newMessageBody\"\r\n          validate={[required, maxLength]}\r\n          component={Textarea}\r\n          placeholder=\"Your message\"\r\n        />\r\n        <div>\r\n          <button>Send</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { reset } from \"redux-form\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport {\r\n  addMessageActionCreater,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    newDialogText: state.dialogsPage.newDialogText,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    newMessageContainer: (newMessageBody) => {\r\n      dispatch(addMessageActionCreater(newMessageBody));\r\n      dispatch(reset('dialogAddMessageForm'))\r\n    },\r\n  };\r\n};\r\n\r\ncompose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  withAuthRedirect\r\n)(Dialogs);;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet maxStateToPropsForRedirect = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n  class RedirectConponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to=\"/login\" />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n  \r\n  let ConnectedAuthRedirectComponent = connect(maxStateToPropsForRedirect)(RedirectConponent);\r\n\r\n  return ConnectedAuthRedirectComponent\r\n};\r\n"],"names":["props","className","s","to","id","name","message","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","action","Field","validate","required","component","Textarea","placeholder","dialogsElements","dialogs","map","d","messagesElements","messages","m","formData","console","log","newMessageContainer","newMessageBody","mapStateToProps","state","dialogsPage","newDialogText","mapDispatchToProps","dispatch","addMessageActionCreater","reset","compose","connect","withAuthRedirect","Dialogs","maxStateToPropsForRedirect","isAuth","auth","Component","RedirectConponent","this","React"],"sourceRoot":""}